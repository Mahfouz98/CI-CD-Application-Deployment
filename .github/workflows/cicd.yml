name: CI/CD Pipeline

on:
  workflow_dispatch:
 
    
jobs:

  Build:
    name: Build the Source Code by Maven
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout Repo 
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn package --file pom.xml

    - uses: actions/upload-artifact@v4
      with:
        name: Boardgame
        path: target/*.jar
  
  Test:
    needs: [ Build ] 
    name: Make Vulnerability Scan, Unit-Test and Quality Gate check
    runs-on: ubuntu-22.04
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
    
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: Boardgame
        path: artifacts/  

    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'table'
        scan-ref: '.'
        output: 'trivy-fs-report.html'

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      run: |
        docker build -t ahmedmahfouz/webapp:latest .

    - name: Run Trivy vulnerability scanner for Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ahmedmahfouz/webapp:latest'
        format: 'table'
        output: trivy-image-report.html

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker Image
      run: docker push ahmedmahfouz/webapp:latest
     
  Deploy: 
    needs: [ Build , Test ]
    name: Provision aws infrastructure using Terraform
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Plan
      run: terraform plan
    
    - name: Terraform Apply
      run: terraform apply --auto-approve

    - name: Take outputs to Github Enviroment Variables
      run: |
        echo "masternode=$(terraform output -raw master-node-ip)" >> $GITHUB_ENV
        echo "workernode1=$(terraform output -raw worker-node1-ip)" >> $GITHUB_ENV
        echo "workernode2=$(terraform output -raw worker-node2-ip)" >> $GITHUB_ENV

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Adding keypair into machine
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.masternode  }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |  
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /home/ubuntu/keypair.pem   
          chmod 400 /home/ubuntu/keypair.pem 
      
    - name: Run playbook
      uses: dawidd6/action-ansible-playbook@v2
      with:
        playbook: main-playbook.yaml
        directory: ./
        configuration: |
          [defaults]
          host_key_checking = False
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        inventory: |
          [EC2]
          master ansible_host=${{ env.masternode }}
          worker ansible_host=${{ env.workernode1 }}
          worker2 ansible_host=${{ env.workernode2 }}
          [EC2:vars]
          ansible_user="ubuntu" 
    
    - name: multiple command
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.masternode  }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |      
          echo "KUBECONFIG=$(cat $HOME/.kube/config | base64)" >> $GITHUB_ENV 

    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ env.KUBECONFIG }}
    
    - name: Create Deployment & Service for the Application
      run: |
        kubectl apply -f deployment-service.yaml -n webapps
        kubectl get svc -n webapps
    


    
